
language C

" Not VI compatible.
set nocompatible

" No wrapping.
set nowrap

" Show line numbers.
set number
set numberwidth=5

" Allow backspacing over everything in insert mode.
set backspace=2

" Use status line to display possible completions.
set wildmenu
set wildmode=list:longest,full

" No search highlight, incremental search.
set nohlsearch
set incsearch

" Change the select/visual mode behavior.
behave xterm
set selectmode=key
set keymodel=startsel

" Syntax highlighting.
syntax on

" Load specific term keys setting.
" Needed for some mappings to work properly.
if !has("gui_running")
  let keys=$USERVIM."/keys/".$TERM
  if filereadable(keys)
    execute "source " . keys
  endif
endif

" Cscope support.

if has("cscope")

  set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-
  set cspc=3
  set csto=0
  set cst
  set nocsverb

  " Add any database in current directory.
  if filereadable("cscope.out")
    cs add cscope.out
    " Add database pointed to by environment.
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set csverb

  " Uses cstag (and so cscope if available...).
  set cst
  " Search the tags database before the scope database...
  set csto=1

  " Mappings.
  nmap <unique> <Leader>tg <C-]>
  nmap <unique> <Leader>ts :exe "cscope find s <cword>"<CR>
  nmap <unique> <Leader>td :exe "cscope find d <cword>"<CR>
  nmap <unique> <Leader>tc :exe "cscope find c <cword>"<CR>
  nmap <unique> <Leader>ta :exe "cscope find t <cword>"<CR>
  nmap <unique> <Leader>tf :exe "cscope find f <cfile>"<CR>
  nmap <unique> <Leader>ti :exe "cscope find i ^%:t$"<CR>
  nmap <unique> <Leader>tu :exe "silent! cscope k 0" \| exe "silent !cscope -R -v -b -s ." \| exe "silent cscope add cscope.out"<CR>

endif

" To update a ctags database.
nmap <unique> <Leader>tU :exe "silent! !ctags --c-kinds=+cdefgmnpstuvx --fields=+S -R -o tags ."<CR>

" Ctags list plugin config.
let Tlist_Enable_Fold_Column = 0
let Tlist_Sort_Type = "name"
let Tlist_Show_One_File = 1
let Tlist_Show_Menu = 0
nmap <silent> <unique> <Leader>tl :exe "Tlist"\|wincmd p<CR>

" Improved completion.

set complete=.,t,i,k

function! CleverTab()
  let to_pos=strpart(getline('.'), 0, col('.') - 1 )
  let from_pos=strpart(getline('.'), col('.') - 2, col('$'))
  if to_pos =~ '^\s*#\s*include'
    if to_pos =~ '^\s*#\s*include\s*$'
      return " \"\<C-X>\<C-F>\"\<Left>"
    endif
    return "\<C-X>\<C-F>"
  elseif from_pos =~ '^\k'
    return "\<C-P>"
  endif
  return "\<Tab>"
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

function! SCleverTab()
  let to_pos=strpart(getline('.'), 0, col('.') - 1 )
  let from_pos=strpart(getline('.'), col('.') - 2, col('$'))
  if from_pos =~ '^\k'
    return "\<C-N>"
  endif
  return "\<Tab>"
endfunction
inoremap <S-Tab> <C-R>=SCleverTab()<CR>

inoremap <C-]> <C-x><C-]>
inoremap <C-f> <C-x><C-f>
inoremap <C-d> <C-x><C-d>
inoremap <C-l> <C-x><C-l>
inoremap <C-k> <C-x><C-k>

" Mappings for mark plugin.
nmap <unique> <silent> <leader>mm <Plug>MarkSet
vmap <unique> <silent> <leader>mm <Plug>MarkSet
nmap <unique> <silent> <leader>mr <Plug>MarkRegex
vmap <unique> <silent> <leader>mr <Plug>MarkRegex
nmap <unique> <silent> <leader>mn <Plug>MarkClear

" Have vimball put file in $USERVIM.
let g:vimball_home=$USERVIM

" For switching buffers.
nmap <silent> <M-Right> :bn<CR>
nmap <silent> <M-Left> :bp<CR>
nmap <silent> <M-1> :brewind<CR>
nmap <silent> <M-2> :brewind <bar> bn<CR>
nmap <silent> <M-3> :brewind <bar> bn 2<CR>
nmap <silent> <M-4> :brewind <bar> bn 3<CR>
nmap <silent> <M-5> :brewind <bar> bn 4<CR>
nmap <silent> <M-6> :brewind <bar> bn 5<CR>
nmap <silent> <M-7> :brewind <bar> bn 6<CR>
nmap <silent> <M-8> :brewind <bar> bn 7<CR>
nmap <silent> <M-9> :brewind <bar> bn 8<CR>
nmap <silent> <M-0> :blast<CR>

" For iterating on errors.
nmap <silent> <M-up> :cp<CR>
nmap <silent> <M-down> :cn<CR>

" For saving current buffer.
map <silent> <F2> :w<CR>

" Delete the current buffer, issuing bnext in all windows
" where displayed before that.
function! DeleteBuffer()
  let bid = bufnr('%')
  let wid = winnr()
  if &buftype ==# "quickfix" || &buftype ==# "nowrite" || &buftype ==# "nofile" || &buftype ==# "help"
    silent close
  else
    silent! exe "bprev | bdel " . bid
  end
  if bid == bufnr('%')
    :q
  end
endfunction

" For deleting current buffer (and closing window when needed).
map <silent> <F4> :call DeleteBuffer()<CR>

" For switching search highlighting on/off.
function! ToggleSearchHighlighting()
  if &hlsearch
    set nohlsearch
  else
    set hlsearch
  endif
endfunction
map <silent> <F6> :call ToggleSearchHighlighting()<CR>

" vim: ft=vim sw=2
