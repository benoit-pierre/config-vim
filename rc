
" Load user config (username, email, ...).
let user=$USERVIM."/user"
if filereadable(user)
  execute "source " . user
endif

language C

" Not VI compatible.
set nocompatible

" No wrapping, but use ^ and $ for incomplete lines.
set nowrap
set lcs=precedes:^,extends:$

" Show line numbers.
set number
set numberwidth=5

" Allow backspacing over everything in insert mode.
set backspace=2

" To keep hidden buffers
" (so we can change buffer without
" the need to write changes ...).
set hidden

" Use status line to display possible completions.
set wildmenu
set wildmode=list:longest,full

" No search highlight, incremental search.
set nohlsearch
set incsearch

" Save info file in the user VIM directory.
let &viminfo="!,'20,\"50,n".$USERVIM."/info"

" Change the select/visual mode behavior.
behave xterm
set selectmode=key
set keymodel=startsel

" Activate use of filetype, indent, and plugin.
filetype on
filetype indent on
filetype plugin on

" Syntax highlighting.
syntax on

" Show statusline even if only one window is visible.
set laststatus=2

" Better status line.
set statusline=%<%f\ %h%y\ %{&ff}\ %{&fenc}\ %m%r%=%-24.(\ %l,%c%V\ [%b,0x%B]\ %)\ %P

" Put swap files in $USERVIM/swap or ~/tmp
" (fallback to current dir if not possible).
if !isdirectory($USERVIM."/swap")
  silent !mkdir $USERVIM"/swap"
endif
set directory=$USERVIM/swap//,~/tmp//,.

" Load specific term keys setting.
" Needed for some mappings to work properly.
if !has("gui_running")
  let keys=$USERVIM."/keys/".$TERM
  if filereadable(keys)
    execute "source " . keys
  endif
endif

" Cscope support. {{{

if has("cscope")

  set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-
  set cspc=3
  set csto=0
  set cst
  set nocsverb

  " Add any database in current directory.
  if filereadable("cscope.out")
    cs add cscope.out
    " Add database pointed to by environment.
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set csverb

  " Uses cstag (and so cscope if available...).
  set cst
  " Search the tags database before the scope database...
  set csto=1

  " Mappings.
  nmap <unique> <Leader>tg <C-]>
  nmap <unique> <Leader>ts :exe "cscope find s <cword>"<CR>
  nmap <unique> <Leader>td :exe "cscope find d <cword>"<CR>
  nmap <unique> <Leader>tc :exe "cscope find c <cword>"<CR>
  nmap <unique> <Leader>ta :exe "cscope find t <cword>"<CR>
  nmap <unique> <Leader>tf :exe "cscope find f <cfile>"<CR>
  nmap <unique> <Leader>ti :exe "cscope find i ^%:t$"<CR>
  nmap <unique> <Leader>tu :exe "silent! cscope k 0" \| exe "silent !cscope -R -v -b -s ." \| exe "silent cscope add cscope.out"<CR>

endif

" }}}

" To update a ctags database.
nmap <unique> <Leader>tU :exe "silent! !ctags --c-kinds=+cdefgmnpstuvx --fields=+S -R -o tags ."<CR>

" Ctags list plugin config.
let Tlist_Enable_Fold_Column = 0
let Tlist_Sort_Type = "name"
let Tlist_Show_One_File = 1
let Tlist_Show_Menu = 0
nmap <silent> <unique> <Leader>tl :exe "Tlist"\|wincmd p<CR>

" To toggle whitespace ignore for diffs.
map <unique> <Leader>d<space> :if &diffopt =~ ',\?iwhite\>' <Bar> set diffopt-=iwhite <Bar> else <Bar> set diffopt+=iwhite <Bar> endif <CR>
map <unique> <Leader>dd       :if &diff <Bar> set nodiff <Bar> set noscrollbind <Bar> else <Bar> diffthis <Bar> endif <CR>

" Improved completion. {{{

set complete=.,t,i,k

function! CleverTab()
  let to_pos=strpart(getline('.'), 0, col('.') - 1 )
  let from_pos=strpart(getline('.'), col('.') - 2, col('$'))
  if to_pos =~ '^\s*#\s*include'
    if to_pos =~ '^\s*#\s*include\s*$'
      return " \"\<C-X>\<C-F>\"\<Left>"
    endif
    return "\<C-X>\<C-F>"
  elseif from_pos =~ '^\k'
    return "\<C-P>"
  endif
  return "\<Tab>"
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

function! SCleverTab()
  let to_pos=strpart(getline('.'), 0, col('.') - 1 )
  let from_pos=strpart(getline('.'), col('.') - 2, col('$'))
  if from_pos =~ '^\k'
    return "\<C-N>"
  endif
  return "\<Tab>"
endfunction
inoremap <S-Tab> <C-R>=SCleverTab()<CR>

inoremap <C-]> <C-x><C-]>
inoremap <C-f> <C-x><C-f>
inoremap <C-d> <C-x><C-d>
inoremap <C-l> <C-x><C-l>
inoremap <C-k> <C-x><C-k>

" }}}

" Mappings for mark plugin.
nmap <unique> <silent> <leader>mm <Plug>MarkSet
vmap <unique> <silent> <leader>mm <Plug>MarkSet
nmap <unique> <silent> <leader>mr <Plug>MarkRegex
vmap <unique> <silent> <leader>mr <Plug>MarkRegex
nmap <unique> <silent> <leader>mn <Plug>MarkClear

" Have vimball put file in $USERVIM.
let g:vimball_home=$USERVIM

" Configure tSkeleton plugin.
let g:tskelUserName=username
let g:tskelUserEmail=useremail

" Silence NERD commenter plugin.
let NERDShutUp=1

" Buffer navigation. {{{

nmap <silent> <M-Right> :bn<CR>
nmap <silent> <M-Left> :bp<CR>
nmap <silent> <M-1> :brewind<CR>
nmap <silent> <M-2> :brewind <bar> bn<CR>
nmap <silent> <M-3> :brewind <bar> bn 2<CR>
nmap <silent> <M-4> :brewind <bar> bn 3<CR>
nmap <silent> <M-5> :brewind <bar> bn 4<CR>
nmap <silent> <M-6> :brewind <bar> bn 5<CR>
nmap <silent> <M-7> :brewind <bar> bn 6<CR>
nmap <silent> <M-8> :brewind <bar> bn 7<CR>
nmap <silent> <M-9> :brewind <bar> bn 8<CR>
nmap <silent> <M-0> :blast<CR>

" }}}

" For iterating on errors.
nmap <silent> <M-up> :cp<CR>
nmap <silent> <M-down> :cn<CR>

" Buffer save/deletion. {{{

" For saving current buffer.
map <silent> <F2> :w<CR>

" Delete the current buffer, issuing bnext in all windows
" where displayed before that.
function! DeleteBuffer()
  let bid = bufnr('%')
  let wid = winnr()
  if &buftype ==# "quickfix" || &buftype ==# "nowrite" || &buftype ==# "nofile" || &buftype ==# "help"
    silent close
  else
    silent! exe "bprev | bdel " . bid
  end
  if bid == bufnr('%')
    :q
  end
endfunction

" For deleting current buffer (and closing window when needed).
map <silent> <F4> :call DeleteBuffer()<CR>

" }}}

" Search highlighting. {{{

function! ToggleSearchHighlighting()
  if &hlsearch
    set nohlsearch
  else
    set hlsearch
  endif
endfunction

map <silent> <F6> :call ToggleSearchHighlighting()<CR>

" }}}

" Indent and retab. {{{

function! Indent_and_Retab() range
  if exists("g:listBlanks")
    silent! execute a:firstline.",".a:lastline.'s/\s*\r\?$'
  end
  execute a:firstline.",".a:lastline.'retab'
  execute "normal ".a:firstline."G=".a:lastline . 'G'
endfunction

function! Indent_and_Retab_operator(type)
  :'[,']call Indent_and_Retab()
endfunction

function! Indent_and_Retab_visual()
  call Indent_and_Retab_mark('<', '>')
endfun

vmap <silent> ,= :call Indent_and_Retab()<CR>
nmap <silent> ,= :set opfunc=Indent_and_Retab_operator<CR>g@
nmap <silent> ,== :.call Indent_and_Retab()<CR>

" }}}

" Swap two pieces of text. {{{

function! SwapText()

  let l1=line("'.")
  let c1=col("'.")

  let l2=line("'>")
  let c2=col("'>")
  let s2=c2-col("'<")

  exe 'normal gvP'
  if l1 == l2 && c1 >= c2
    let c1+=s2
  endif
  cal cursor(l1,  c1)
  exe 'normal "*P'
 
endfunction

vnoremap <C-s> <Esc>:call SwapText()<CR>

" }}}

" vim: ft=vim sw=2 foldmethod=marker
