#!/usr/bin/env ruby

require 'tempfile'

$VERSION = '0.8.1'

$DEBUG = false

if $DEBUG

  require 'pp'

  def dbg(hdr, obj)
    STDERR.print '%s: ' % hdr
    PP.pp(obj, out=STDERR)
  end

else

  def dbg(hdr, obj)
  end

end

def cat(io, squeeze_blank_lines=false)
  previous_line_blank = false
  while line = io.gets
    if squeeze_blank_lines and line =~ /^\s*$/
      print line unless previous_line_blank
      previous_line_blank = true
    else
      previous_line_blank = false
      print line
    end
  end
end

options = {
  :squeeze_blank_lines => false,
  :no_alternate_screen => false,
  :quit_if_one_screen => false,
  :ignore_case => false,
  :pipe_edit => false,
  :man_page => false,
  :gui => false,
}

dbg(:VLESS_OPT, ENV['VLESS_OPT'])
dbg(:ARGV, ARGV)

# Parse arguments.

arglist = ARGV
arglist.unshift(ENV.fetch('VLESS_OPT', '').split)
arglist.flatten!

filenames = []
until arglist.empty?

  arg = arglist.shift
  break if arg == '--'

  # Non option argument.
  if arg =~ /^(-$|[^-+])/
    filenames << arg
    next
  end

  if arg.start_with?('--')
    # Long option.
    arg, value = arg.split('=', 2)
    opts = [arg]
  else
    # Short option(s).
    value = arg.start_with?('-')
    opts = arg[1..-1].chars.collect { |o| '-' + o }
  end

  opts.each do |o|

    case o
    when '-g'
      options[:gui] = value
    when '-i'
      options[:ignore_case] = value
    when '-s'
      options[:squeeze_blank_lines] = value
    when '-X'
      options[:no_alternate_screen] = value
    when '-F'
      options[:quit_if_one_screen] = value
    when '--version'
      puts "vimpager #{$VERSION}"
      exit 0
    when '--man'
      options[:man_page] = true
    when '--pipe-edit'
      options[:pipe_edit] = true
      options[:quit_if_one_screen] = false
    else
      raise "unsupported option #{o}"
    end

  end

end
filenames.uniq!

dbg(:options, options)
dbg(:filenames, filenames)

unless options[:pipe_edit] or STDOUT.isatty
  cat(Kernel, options[:squeeze_blank_lines])
  exit 0
end

VIMPAGER_RC = ENV.fetch('VIMPAGER_RC', '%s/vim/rc.pager' % ENV.fetch('XDG_CONFIG_HOME', File.expand_path('~/.config')))

unless File.readable?(VIMPAGER_RC)

  cmd = %w{ /usr/bin/less }
  cmd << '-s' if options[:squeeze_blank_lines]
  cmd << '-X' if options[:no_alternate_screen]
  cmd << '-F' if options[:quit_if_one_screen]
  cmd << '-i' if options[:ignore_case]
  cmd.concat(filenames)

  dbg(:cmd, cmd)

  exec(*cmd)
  exit 255

end

if options[:gui]
  options[:no_alternate_screen] = false
  options[:quit_if_one_screen] = false
end

cmd = %w{ vim -R -u }
cmd << VIMPAGER_RC
cmd << '-g' if options[:gui]
cmd << '-f' if options[:gui]
cmd << '+set ft=man' if options[:man_page]

if options[:ignore_case]
  cmd << '-c'
  cmd << 'set ignorecase smartcase'
end

vless_opt = []
vless_opt << '-F' if options[:quit_if_one_screen]
vless_opt << '-X' if options[:no_alternate_screen]

ENV['VLESS_OPT'] = vless_opt.join(' ')

dbg(:VLESS_OPT, ENV['VLESS_OPT'])

# Default to adding stdin at the end of the arguments list.
explicit_stdin = false
add_stdin = filenames.index('-')
if add_stdin
  filenames.delete_at(add_stdin)
  explicit_stdin = true
elsif filenames.empty?
  add_stdin = 0
end
stdin_file = nil

# Check files existence.
filenames.each do |arg|
  if not File.file?(arg)
    STDERR.puts "#{arg}: No such file or directory"
    exit 1
  end
end

if add_stdin

  # Don't try to read from a terminal.
  if STDIN.isatty
    STDERR.puts explicit_stdin ? 'Input is a terminal' : 'Missing filename'
    exit 1
  end

  stdin_file = Tempfile.open('stdin-')

  pid = fork {

    STDOUT.reopen(stdin_file)

    child_cmd = %w{ col -b }

    exec(*child_cmd)
    exit 255
  }

  Process.waitpid(pid)

  stdin_file.close

  filenames.insert(add_stdin, stdin_file.path)

  stdin_cmd = 'setl noro'
  stdin_cmd << ' buftype=nofile' unless options[:pipe_edit]
  if stdin_file.path == filenames[0]
    cmd << "+#{stdin_cmd}"
  else
    cmd << "+autocmd BufRead #{stdin_file.path} #{stdin_cmd}"
  end

else

  options[:pipe_edit] = false

end

cmd << '--'
cmd.concat(filenames)

dbg(:cmd, cmd)

pid = fork {

  unless options[:gui]
    STDIN.reopen('/dev/tty') unless STDIN.isatty
    STDOUT.reopen('/dev/tty') unless STDOUT.isatty
  end

  exec(*cmd)
  exit 255

}

Process.waitpid(pid)

if 0 == $? and options[:pipe_edit]
  stdin_file.open
  cat(stdin_file, options[:squeeze_blank_lines])
end

stdin_file.unlink if stdin_file

exit $?.to_i >> 8

