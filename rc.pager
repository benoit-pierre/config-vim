"
" VIM RC to be used so VIM act as a replacement less like pager. See
" vimpager.rb for a small Ruby script that will do the right thing.
"
" Use it as a manpager by setting MANPAGER: export MANPAGER='pager --man'.
"

let g:vless=1

source ~/.vimrc

" Key bindings. {{{

map b <C-b><C-g>
map q :qa<CR>
map <space> <C-f><C-g>

" }}}

set hlsearch
set readonly
set nonumber
set nofoldenable foldcolumn=0

" Options parsing. {{{

let g:vless_opt_F=0
let g:vless_opt_X=0

for opt in split($VLESS_OPT)
  if opt ==# '-F'
    let g:vless_opt_F=1
  endif
  if opt ==# '-X'
    let g:vless_opt_X=1
  endif
endfor

" }}}

" Emulate less -F option. {{{

" Automatically exit if the entire file can be displayed.
"
" N.B.: only applicable when only one file is edited.

if g:vless_opt_F && 1 == argc()

  function QuitIfWholeBufferVisible()

    let blines=line('$')

    if blines <= winheight(0) && (blines + 1) <= &lines
      " Hide ~ after EOF.
      highlight NonText ctermfg=NONE guifg=NONE
      " If list was set, disable it, and show tabs underlined:
      " this way, the actual content is not changed.
      if &list
        syn match ListTabs /\t\+/ containedin=ALL
        highlight ListTabs cterm=underline
        set nolist
      endif
      set nocursorcolumn nocursorline
      set laststatus=0 showtabline=0

      if g:vless_opt_X
        " Don't use terminal alternate screen.
        set t_ti= t_te=
      endif
      redraw
      if g:vless_opt_X
        " Move terminal cursor after the last line.
        let t_seq='['.(blines + 1).';1H'
        let &t_ti=&t_ti.t_seq
        let &t_te=&t_te.t_seq
      endif
      q
    endif

    augroup vless
      autocmd!
    augroup END

  endfunction

  augroup vless
    autocmd BufWinEnter * call QuitIfWholeBufferVisible()
  augroup END

endif

" }}}

" vim: ft=vim sw=2 foldmethod=marker foldlevel=0
